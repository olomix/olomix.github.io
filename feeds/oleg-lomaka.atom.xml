<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ALEK.WS - Oleg Lomaka</title><link href="http://www.alek.ws/" rel="alternate"></link><link href="http://www.alek.ws/feeds/oleg-lomaka.atom.xml" rel="self"></link><id>http://www.alek.ws/</id><updated>2017-06-27T14:36:00+03:00</updated><entry><title>Выбор языка программирования для новичков</title><link href="http://www.alek.ws/blog/2017/Jun/27/vybor-iazyka-programmirovaniia-dlia-novichkov.html" rel="alternate"></link><published>2017-06-27T14:36:00+03:00</published><updated>2017-06-27T14:36:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2017-06-27:/blog/2017/Jun/27/vybor-iazyka-programmirovaniia-dlia-novichkov.html</id><summary type="html">&lt;p&gt;Последние дни часто слышу вопросы "с чего начинать обучение будущему программисту". Какие книги читать. На какие языки программирования смотреть. Про книги написано много, повторяться не хочется. А хочется сделать обзор языков программирования, которые, по моему мнению, актуальны в 2017-м году чтоб обратить на них внимание. Новичкам можно учить любой. Даже …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Последние дни часто слышу вопросы "с чего начинать обучение будущему программисту". Какие книги читать. На какие языки программирования смотреть. Про книги написано много, повторяться не хочется. А хочется сделать обзор языков программирования, которые, по моему мнению, актуальны в 2017-м году чтоб обратить на них внимание. Новичкам можно учить любой. Даже C++, который по праву считается одним из самых сложных. По всем языкам написаны книги, которые расчитаны на аудиторию, начинающую знакомиться с программированием. В языках нет какого-либо порядка по важности. Просто список.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C: Один из самых низкоуровневых языков. Достаточно прост. До сих пор один из самых используемых. Большинство команд линукса и системных утилит написано на C. Многие высокопроизводительные сервисы написаны на C (web: nginx, dns: bind). Если вы собираетесь программировать ради денег, т.е. делатель только то, за что вам платят деньги, не думаю, что когда-то вам понадобится что-то писать на C. Хотя я считаю, умение читать C необходимое условие для человека, который называет себя программистом. Этот язык очень подвержен ошибкам. Очень легко съесть всю память, просто забыв освободить неиспользуемую. Или допустить переполнение буфера, приводящее к удаленному выполнению произвольного кода на вашем сервере. Большинство проблем безопасности находится в программах, написанных на C и PHP. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++: Один из самых сложных языков программирования. Я не знаю места, где бы в полной мере использовали C++. У всех какие-то соглашения о подмножестве языка, которое можно использовать: где-то запрещено использовать шаблоны, где-то отказались от исключений. Этот язык все-еще в тройке самый распространенных прикладных языков программирования. Если вы хотите писать на более-менее высокоуровневом языке, который имеет классы, много сторонних библиотек, и при этом вы хотите быть максимально близко к железу, то вам сюда. На C++ писать сильно проще (быстрее, компактнее), чем на C, но на нем можно допускать почти те-же ошибки, что и на C. Этот язык практически de facto стандарт при разработке игр.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: Скриптовый язык. Выполняется внутри виртуальной машины. Отсюда считается очень медленным. Хотя это не всегда правда. Python очень хорошо интегрируется с другими языками типа C, поэтому многие библиотеки на Python написаны на C. И если вы хотите написать какую-то программу, которая будет лопатить большие объемы чисел, то по факту вы будете пользоваться высокоуровневыми вызовами сторонних библиотек, которые написаны на C людьми с большими головами. И скорость обработки ваших данных будет такая, которую вы сами никогда не достигнете, даже используя C. Язык считается очень простым. Наверное, благодаря тому, что можно в 3 строчки написать свой веб-сервер, который будет раздавать файлики из какой-то директории. Или в пару строчек открыть файл, перелопатить его и преобразовать в другой файл. Очень лаконичный язык. Имеет огромное кол-во конструкций, которые позволяют кратко выражать сложные алгоритмы. Под Python написано огромное кол-во библиотек. Вы можете писать web-приложения, заниматься научными рассчетами, обучать нейронные сети или пользоваться ими. Практически все можно сделать с помощью Python'а. Язык считается идеальным для новичков. Многие университеты переводят программы обучения на Python. Но опасность этого языка, что он прячет от вас железо. Вы практически не задумываетесь о памяти или потреблении CPU когда программируете на этом языке. Многие люди, освоив Python и научившись писать на одном из web-framework'ов типа Django, навсегда зависают в этой экосистеме и при попытке написать какую-то другую программу, кроме web-приложения, оказывается, что не могу сделать даже простых вещей. Еще Python для меня один из самых сложных языков программирования. У него огромное кол-во конструкций и нюансов, если капнуть глубже. Я могу весь день на собеседовании гонять по Python'у. На Python нельзя сделать те-же ошибки, что и на C/C++. Вам не нужно освобождать память, за вас это делает виртуальная машина. Вам не нужно следить за переполнением буфера, за вас это делают реализации массивов и строк. Это идеальный язык, который можно использовать для написания небольших программ автоматизации, которые упрощают жизнь.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java: Что-то среднее между C++ и Python. Как и в Python, вам не нужно задумываться про освобождение памяти, за вас это делает виртуальная машина. Как и в Python'е код выполняется в виртуальной машине. Но выполняется сильно быстрее, чем в Python, т.к. язык достаточно низкоуровневый. Синтаксически очень похож на C++, но имеет мало что общего с ним. Этот язык практически стандарт de facto в больших компаниях. Имеет развесистые фреймворки с хорошей коммерческой поддержкой. Считается самым используемым в мире языком по версии tiobe за 2017 год. Один из самый зрелых рынков. Достаточно легко найти работу. Последние версии Java начали идти в сторону модных тенденций функционального и реактивного программирования, поэтому его уже сложно назвать многословным языком для корпораций. Практически идеальный язык для написания серверных приложений. Инфраструктура вокруг языка наиболее развесистая из всех, что я знаю. Прекрасные IDE, средства мониторинка, средства сборки и разворачивания приложений. Много коммерческих компаний пишут программы, которые облегчают жизнь программистам на Java. Огромное количество источников информации: книги, статьи, конференции, курсы. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go (AKA Golang): Относительно молодой язык от Google'а. Как и java/python имеет сборщик мусора. Т.е. вам не нужно следить за памятью, она очищается сама. Как и C/C++, язык компилируется в нативный код операционной системы. Т.е. в нем нет виртуальной машины и он исполняется очень быстро. Синтаксис похож на C. С точки зрения конструкции, очень бедный язык. Но очень простой. Google сознательно далали универсальный язык, который можно освоить за один вечер и свою первую полезную программу написать в первый день изучения языка. Многие его ругают за его простоту, которая выливается в многословность. Но язык прекрасно подходит для написания быстрых веб-приложений. Многозадачность и параллельность встроены в язык. Т.е. ваши программы могут выполняться на всех ядрах процессора просто, если вы будете писать идеологически правильно на Go, а не втупую переписывать на него программы с других языков. Часто Go расценивается как замена Python. Многие компании переписывают на Go части своих систем, написанных на Python, ради экономии ресурсов (серверов). Не знаю пока никого, кто бы переписывал в Java на Go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript: Язык de facto, если вы пишете приложение для браузера. Т.е. если собираетесь работать с web'ом, то JavaScript нужно знать. Но нельзя знать только JavaScript. Некоторые люди пишут server-side приложения на JavaScript. Ничего не имею против такого подхода, но если вы знаете только JavaScript и пишите на нем все только потому, что не знаете других языков, это плохо. Больше мне нечего сказать про этот язык. Многие люди предпочли бы, чтоб этого языка не было вообще. Но факт остается фактом. Этот язык встроен в каждый браузер на земле. И пока это не изменится (а это никогда не изменится), JavaScript будет одним из самых популярных языков. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust: Современная замена C/C++. Лишен проблем этих языков таких как утечки памяти. В язык добавлено много интересных вещей из других миров. Исходных код компилируется в нативный. Виртуальной машины нет. Сборщика мусора также нет, т.е. работать должен без пауз на сборку мусора в отличие от Go. Также в отличие от Go язык более компактный. Это, наверное, единственный язык, который я бы не советовал учить в качестве первого. И дело даже не в его сложности (C++ тоже сложный). Просто язык слишком молодой. Мои первые попытки изучить его постоянно натыкались на какие-то несоответствия. Читаешь какую-то книгу, делаешь как написано, а оно не работает, т.к. многое уже поменялось. Раза с третьего дочитал книгу по Rust'у до конца и понял некоторые концепции. Экосистема вокруг языка тоже слабая. Но я верю, что перспективы у этого языка хорошие. И многие люди уже используют его как основной. Но комьюнити и источники для обущения пока самые слабые из всего, что перечислено выше. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Отдельными пунктами хотелось бы выделить языки Objective-C &amp;amp; Swift. Они вам понадобятся только в случае, если вы захотите писать что-то для Apple'овских железок (macOS, iOS, watchOS).&lt;/p&gt;
&lt;p&gt;Итак, возвращаясь к вопросу какой язык учить первым? Я не знаю. Мое мнение по этому поводу меняется из месяца в месяц. Иногда мне кажется, что начинать нужно с Python'а. Потом после очередного собеседования человека, который в своей жизни не видел ничего кроме Python'а мне кажется, что нужно учить C, как самый примитивный язык. Это две крайности. На самом деле, я думаю программисту должно быть не важно на каком языке писать. Эта фраза регулярно проскакивает в разных статьях. Программист должен осознавать поставленную задачу, видеть архитектуру программы, которая решит эту задачу и просто реализовывать эту архитектуру на том языке, который по его мнению подходит лучше всего. Т.е. выходит, что вы должны знать все эти языки, чтоб в зависимости от поставленной задачи использовать наиболее подходящий. &lt;/p&gt;
&lt;p&gt;На работе я активно использую 3 языка: Go, Python, JavaScript. Но вне работы я читаю какие-то статьи или книги по другим языкам. Иногда использую для своих проектов. Мне бы хотелось обладать знаниями во всех языках. К сожалению, к apple'овским Objective-C &amp;amp; Swift я еще не добрался. И не факт, что завтра у меня не появится проект, для которого я посчитаю нужных использовать Java или Rust и буду писать на них.&lt;/p&gt;
&lt;p&gt;Мое субъективное резюме. Не важно какой язык вы выучите первым. Вы должны знать их все. Хотя-бы поверхностно. &lt;/p&gt;</content><category term="Languages"></category></entry><entry><title>Microsoft представила Visual Studio Code. Бесплатный, кросс-платформенный редактор кода для OS X, Linux и Windows</title><link href="http://www.alek.ws/blog/2015/Apr/29/microsoft-visual-studio-code.html" rel="alternate"></link><published>2015-04-29T20:59:00+03:00</published><updated>2015-04-29T20:59:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2015-04-29:/blog/2015/Apr/29/microsoft-visual-studio-code.html</id><summary type="html">&lt;p&gt;На конференции &lt;a href="http://www.buildwindows.com"&gt;Build 2015&lt;/a&gt; компания Microsoft анонсировала запуск &lt;a href="https://code.visualstudio.com/Download"&gt;Visual Studio Code&lt;/a&gt;. Легковесный, кросс-платформенный редактор кода для создания современных web и облачных приложений. Редактор работает под OS X, Linux и Windows. Официально приложение находится в статусе preview и доступно для скачивания &lt;a href="https://code.visualstudio.com/Download"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Это первый раз, когда Microsoft представила кросс-платформенную среду разработки …&lt;/p&gt;</summary><content type="html">&lt;p&gt;На конференции &lt;a href="http://www.buildwindows.com"&gt;Build 2015&lt;/a&gt; компания Microsoft анонсировала запуск &lt;a href="https://code.visualstudio.com/Download"&gt;Visual Studio Code&lt;/a&gt;. Легковесный, кросс-платформенный редактор кода для создания современных web и облачных приложений. Редактор работает под OS X, Linux и Windows. Официально приложение находится в статусе preview и доступно для скачивания &lt;a href="https://code.visualstudio.com/Download"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Это первый раз, когда Microsoft представила кросс-платформенную среду разработки. Полная версия Visual Studio доступна только на Windows. Но анонс Visual Studio Code показал, что компания готова вкладываться в поддержку других платформ.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.alek.ws/images/010/visual_studio_code.jpg" class="img-responsive" alt="Visual Studio Code" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Многие люди разрабатывают програмное обеспечение на Windows. Но так-же мы видим много людей на Linux и Mac. Вместо того, чтоб заставлять последних переходить на Windows, мы хотим встретиться с ними на ихних платформах.&lt;/p&gt;
&lt;footer&gt;Вице-президент Microsoft &lt;cite title="S. ‘Soma’ Somasegar"&gt;&lt;a href="http://blogs.msdn.com/b/somasegar/"&gt;S. ‘Soma’ Somasegar&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Разработчики на этих платформах часто предпочитают использовать простые редакторы кода типа &lt;a href="http://www.sublimetext.com"&gt;Sublime Text&lt;/a&gt; вместо полноценных IDE вроде Visual Studio.&lt;/p&gt;
&lt;p&gt;Visual Studio Code предоставляет разработчикам встроенную поддержку нескольких языков. Для всех этих языков будет доступна навигация и богатая поддержка в помощи написания кода. В данный момент есть поддержка JavaScript, TypeScript, Node.js и ASP.NET.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.alek.ws/images/010/screen.jpg" class="img-responsive" /&gt;&lt;/p&gt;
&lt;p&gt;В базовых возможностях редактора будут все инструменты, которые вы привыкли видеть в современном редакторе кода. Включая подсветку синтаксиса, настройка клавиш, поиск соответствующих скобок и сниппеты. Somesegar заявил, что поддержка git также есть из коробки.&lt;/p&gt;
&lt;p&gt;Новый редактор частично основывается на экспертизе Microsoft с онлайновым &lt;a href="http://azure.microsoft.com/en-us/documentation/videos/building-web-sites-with-visual-studio-online-monaco/"&gt;Monaco editor for Visual Studio Online&lt;/a&gt;. И также произведены работы по переносу возможностей языков из Visual Studio. Включая, например, проект Roslyn и компилятор Microsoft .NET. Компания заявила, что языковые сервисы, созданные для Visual Studio Code будут доступны для других редакторов. Включая Sublime Text, Vi и Atom.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.alek.ws/images/010/visual_studio_code_2.jpg" class="img-responsive" alt="Visual Studio Code" /&gt;&lt;/p&gt;
&lt;p&gt;Некоторые из этих вещей уже доступны для других редакторов. Не так давно, Microsoft запустила &lt;a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin"&gt;TypeScript plug-in&lt;/a&gt; для Sublime Text. Компания собирается запускать подобные проекты и дальше. Все к тому, чтоб прийти к разработчикам на те платформы, где они сидят.&lt;/p&gt;
&lt;p&gt;Данный анонс, стал для многих сюрпризом. Однако он хорошо вписываются в череду событий, происходящих довольно долго. Таких как открытие исходных кодов .NET Core и запуском бесплатной &lt;a href="http://techcrunch.com/2014/11/12/microsoft-makes-visual-studio-free-for-small-teams/"&gt;Visual Studio Community edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Всего-лишь несколько лет назад, этот анонс мог вызвать шок. Сейчас это всего-лишь приятный сюрприз.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.alek.ws/images/010/screen2.jpg" class="img-responsive" /&gt;&lt;/p&gt;
&lt;p&gt;По материалам &lt;a href="http://techcrunch.com/2015/04/29/microsoft-shocks-the-world-with-visual-studio-code-a-free-code-editor-for-os-x-linux-and-windows/"&gt;techcrunch&lt;/a&gt;.&lt;/p&gt;</content><category term="IDE"></category><category term="Microsoft"></category></entry><entry><title>Как писать код быстрее с меньшим количеством ошибок</title><link href="http://www.alek.ws/blog/2015/Apr/27/how-to-code-faster-with-fewer-bugs.html" rel="alternate"></link><published>2015-04-27T20:55:00+03:00</published><updated>2015-04-27T20:55:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2015-04-27:/blog/2015/Apr/27/how-to-code-faster-with-fewer-bugs.html</id><summary type="html">&lt;p&gt;Попалась небольшая статья на просторах интернета о том как стать хорошим программистом. Далее вольный перевод &lt;a href="http://developerbase.blogspot.com/2015/04/how-to-code-faster-with-fewer-bugs.html"&gt;оригинала&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Практикуйтесь&lt;/em&gt;. Просто продолжайте делать то, что делаете. Создавайте больше софта, используйте больше инструментов, делайте больше ошибок, анализируйте их, разбирайтесь с ними и учитесь на них. Всегда практикуйте свои умения. Никогда не оценивайте их. Если …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Попалась небольшая статья на просторах интернета о том как стать хорошим программистом. Далее вольный перевод &lt;a href="http://developerbase.blogspot.com/2015/04/how-to-code-faster-with-fewer-bugs.html"&gt;оригинала&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Практикуйтесь&lt;/em&gt;. Просто продолжайте делать то, что делаете. Создавайте больше софта, используйте больше инструментов, делайте больше ошибок, анализируйте их, разбирайтесь с ними и учитесь на них. Всегда практикуйте свои умения. Никогда не оценивайте их. Если вы будете сожалеть, что долго писали или дебажили что-то. Или как много ошибок допустили. Вы лишь испытаете ненужный стресс и усложните обучение.&lt;/p&gt;
&lt;p&gt;К сожалению, этот совет слишком обобщенный. Он применим к каждому инженеру-программисту по разному. Важно дать себе время и возможность обучаться. Однако, что вы учите и как, может сильно отличаться от того как ваши друзья и коллеги делают это.&lt;/p&gt;
&lt;p&gt;Некоторые мысли и взгляды, которые я выработал на работе и персональных проектах. Вы можете с ними не согласиться, если ваш стиль работы или обучения другой.&lt;/p&gt;
&lt;p&gt;Используйте правильные инструменты для работы, основываясь на задачах проекта, а не собственных знаниях конкретных технологий. К примеру, Python дает возможность писать софт быстро. Но он сложен с точки зрения оптимизации производительности и использования памяти. C дает очень четкий контроль что делается на машинном уровне за счет более многословного кода и меньшей его понятности в будущем. Если вы знаете Python и не знаете C, и вам нужно написать быстрый, занимающий мало памяти код, возможно, стоит уделить немного дополнительного времени для изучения C, чем пытаться разобраться с производительностью Python'а. Подобно можно рассуждать на тему выбора библиотек, используемых в проекте, шаблонов проектирования и др. Изучение разных языков и библиотек поможет вам думать более разнонаправленно при написании кода, что в свою очередь, позволит предвидеть проблемы и сэкономить время.&lt;/p&gt;
&lt;p&gt;Проведите некоторое время планируя проект, но не сильно много. Начиная проект, я в первую очередь обдумываю обобщенно какие компоненты нужны для работы системы. Но не трачу много времени на протоколы взаимодействия или деление на более мелкие подсистемы пока не погружусь в код. Иногда более эфективно бывает написать какой-то компонент "неправильно" вначале. И переписать его при необходимости, когда другие части станут более зрелые. Чрезмерное планирование, может оказаться пустой тратой времени, т.к. зачастую проекты редко соответствуют первоначальным планам. Важно давать себе отчет сколько времени, потраченного на планирование деталей, "достаточно" (т.е. когда нужно остановиться и приступать к кодированию). А это, к сожалению, приходит только с опытом.&lt;/p&gt;
&lt;p&gt;Не бойтесь отладчиков. GDB может пугать начинающих. Но это чудесная вещь, экономящая время. Основы использования выучить довольно просто. Можно отлаживать большое количество проблем, используя лишь комманды break, run, next и print.&lt;/p&gt;
&lt;p&gt;В процессе имплементации частей проекта обдумывайте не только как оно должно работать в штатном режиме, а и исключительные, непредвиденные ситуации. Что будет, если один из параметров функции отрицательный, или null? Что если файлы с данными не существуют, или в неправильном формате, неправильного размера? Что если другой thread обновит этот связанный список в то время, когда этот thread его итерирует? Знания, необходимые чтобы учесть такие ситуации, приходят с опытом. После отладки определенной проблемы, вы будете знать как предугадывать подобные проблемы в будущем.&lt;/p&gt;
&lt;p&gt;Так что, продолжайте практиковаться. Пишите больше софта, используйте больше инструментов, делайте больше ошибок, исследуйте их, исправляйте их и учитесь на них.&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Использование GNU gettext в Java</title><link href="http://www.alek.ws/blog/2014/Apr/08/gnu-gettext-in-java.html" rel="alternate"></link><published>2014-04-08T20:28:00+03:00</published><updated>2014-04-08T20:28:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2014-04-08:/blog/2014/Apr/08/gnu-gettext-in-java.html</id><summary type="html">&lt;h3&gt;Введение в GNU gettext&lt;/h3&gt;
&lt;p&gt;Немного основ. Как работает GNU gettext и чем он лучше традиционных способов локализации в Java таких как &lt;code&gt;.properties&lt;/code&gt; файлы.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Во-первых нормальная поддержка plural form. В неанглийском языке нереально перевести какие-то сложные предложения с числительными. Единственный способ изобретать свои
велосипеды при помощи &lt;a href="http://docs.oracle.com/javase/8/docs/api/java/text/ChoiceFormat.html"&gt;ChoiceFormat&lt;/a&gt;. Выглядят такие переводы нереально …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Введение в GNU gettext&lt;/h3&gt;
&lt;p&gt;Немного основ. Как работает GNU gettext и чем он лучше традиционных способов локализации в Java таких как &lt;code&gt;.properties&lt;/code&gt; файлы.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Во-первых нормальная поддержка plural form. В неанглийском языке нереально перевести какие-то сложные предложения с числительными. Единственный способ изобретать свои
велосипеды при помощи &lt;a href="http://docs.oracle.com/javase/8/docs/api/java/text/ChoiceFormat.html"&gt;ChoiceFormat&lt;/a&gt;. Выглядят такие переводы нереально дико.&lt;/li&gt;
&lt;li&gt;Во-вторых в исходном коде будут нормальные тексты, а не загадочные сокращения вроде &lt;code&gt;template.loginForm.okButtonLabel&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;К недостаткам можно отнести необходимость использовать сторонние утилиты, что не очень приветствуется в Java мире.
К счастью, эти утилиты должны использоваться только на этапе разработки/сборки пакета.
Они не нужны на продакшн-сервере или клиентской машине.&lt;/p&gt;
&lt;p&gt;Итак, что это за утилиты и как их использовать. Процесс подготовки перевода можно разделить на несколько частей.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как-нибудь обозначить строки, подлежащие переводу в исходном коде. Традиционно функция, которая возвращает перевод строки называется просто символом подчеркивания &lt;code&gt;_&lt;/code&gt; (это алиас полного названия &lt;code&gt;gettext&lt;/code&gt;). Другие варианты &lt;code&gt;ngettext&lt;/code&gt; (перевод фраз, зависящих от цифры), &lt;code&gt;pgettext&lt;/code&gt; (фразы, имеющие разный перевод в разном контексте) и &lt;code&gt;npgettext&lt;/code&gt; (ngettext &amp;amp; pgettext в одном). Вызов этих функций является своеобразным маркером того, что строки, переданные в качестве аргументов, подлежат переводу.&lt;/li&gt;
&lt;li&gt;Следующим шагом мы должны собрать все помеченные строки в одном &lt;code&gt;.pom&lt;/code&gt; файле. Занимается этим утилита &lt;code&gt;xgettext&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Далее этот файл используется чтоб создать &lt;code&gt;.po&lt;/code&gt; файл с переводом на конкретный язык. Для этого используются &lt;code&gt;msginit&lt;/code&gt; &amp;amp; &lt;code&gt;msgmerge&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;И последнее, нужно &lt;em&gt;откомпилировать&lt;/em&gt; &lt;code&gt;.po&lt;/code&gt; файл с переводом в формат, который понимает наша программа. В мире C++/Python и других языков, которые используют нативные сишные библиотеки, компиляция происходит в &lt;code&gt;.mo&lt;/code&gt; файл специального бинарного формата. Для Java мы должны откомпилировать либо в &lt;code&gt;.properties&lt;/code&gt; файл, либо сразу в &lt;code&gt;.class&lt;/code&gt;. В &lt;code&gt;.properties&lt;/code&gt; смысла компилировать я не вижу, т.к. мы получим все те-же проблемы с невозможностью использования plural forms. В &lt;code&gt;.class&lt;/code&gt; переводы компилируются утилитой &lt;code&gt;msgfmt&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Теперь рассмотрим все эти шаги более подробно&lt;/p&gt;
&lt;h3&gt;Маркировка строк для перевода&lt;/h3&gt;
&lt;p&gt;Про разные способы организации вызова фукнций, осуществляющих перевод, из кода можно почитать &lt;a href="http://www.gnu.org/software/gettext/manual/html_node/Java.html"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Для доступа к переводам, используется стандартный &lt;a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html"&gt;ResourceBundle&lt;/a&gt; из поставки JDK.&lt;/p&gt;
&lt;h3&gt;Создание &lt;code&gt;.pot&lt;/code&gt; каталога строк, подлежащих перводу&lt;/h3&gt;
&lt;p&gt;Теперь мы должны найти все строки, нуждающиеся в переводе и сложить их в одном месте, так называемом словаре. Для этого существует утилита &lt;code&gt;xgettext&lt;/code&gt;. Она принимает на вход имена файлов в которых нужно искать строки и складывает их в заданном месте. &lt;code&gt;xgettext&lt;/code&gt; понимает большое кол-во языков, в том числе и Java.&lt;/p&gt;
&lt;p&gt;Назовем наш словарь &lt;code&gt;messages.pot&lt;/code&gt; и положем в &lt;code&gt;src/main/locale&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.java&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xgettext -D . -f - -o - &amp;gt; src/main/locale/messages.pot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь у нас в &lt;code&gt;src/main/locale/messages.pot&lt;/code&gt; будут храниться все строки, найденные в наших файлах с исходным кодом. Трогать этот файл не нужно. Его мы будет использовать для генерации &lt;code&gt;.po&lt;/code&gt; файлов, которые будем редактировать.&lt;/p&gt;
&lt;h3&gt;Создание &lt;code&gt;.po&lt;/code&gt; файла перевода под конкретный язык&lt;/h3&gt;
&lt;p&gt;Каждый язык имеет какие-то свои правила при склонениях разных слов и фраз. Например в русском это "1 обезьяна", "2 обезьяны", "5 обезьян". GNU gettext знает все эти тонкости переводов и подготавливает вам файлик специальным образом чтоб мы могли правильно перевести все эти нюансы. Для работы с &lt;code&gt;.po&lt;/code&gt; есть две команды: &lt;em&gt;msginit&lt;/em&gt; и &lt;em&gt;msgmerge&lt;/em&gt;. Первая создает файлы, вторая их обновляет.&lt;/p&gt;
&lt;p&gt;Создадим файл пеервода для русского языка&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;msginit -l ru -i src/main/locale/messages.pot -o src/main/locale/messages_ru.po
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;После того, как мы его создали, можем немного подправить заголовок. В частности, поскольку мы собираемся туда писать русские буквы, нужно content-type поменять с ascii на utf-8&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: text/plain; charset=UTF-8\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;msginit&lt;/em&gt; нужно выполнять только один раз, т.к. она перезапишет файл. В будующем, когда мы поменяем наши исходные коды и добавим/изменим строки перевода, нужно снова выполнить &lt;em&gt;xgettext&lt;/em&gt; из прошлого пункта и в этот раз запустить &lt;em&gt;msgmerge&lt;/em&gt; для обновления наших переводов. &lt;em&gt;msgmerge&lt;/em&gt; добавит отсутствующие строки в &lt;code&gt;.po&lt;/code&gt; файл. Если же вы поменяли строку, то &lt;em&gt;msgmerge&lt;/em&gt; пометит перевод как fuzzy и не будет его использовать. Вам нужно после обновления проверять все fuzzy строки и удалять слово fuzzy после проверки перевода чтоб все работало. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;msgmerge -U --lang&lt;span class="o"&gt;=&lt;/span&gt;ru src/main/locale/messages_ru.po src/main/locale/messages.pot
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Компиляция &lt;code&gt;.po&lt;/code&gt; файла перевода в java-class&lt;/h3&gt;
&lt;p&gt;После подготовки переводов, мы должны откомпилировать их в ресурсы, доступные нашей программе во время воплнения. Если у вас maven проект, то при стандарной directory layout ресурсы хранятся в src/main/resources. Один из файлов перевода мы должны сделать используемым по умолчанию, иначе будет ошибка, что попытаться запустить программу в локале для которой отсутствует перевод. Предположим у нас два перевода для испанского и русского языков. И мы хотим русский использовать по умолчанию. Тогда мы должны выполнить следующие команды&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;msgfmt --java2 -d src/main/resources -r &lt;span class="s1"&gt;&amp;#39;example.messages&amp;#39;&lt;/span&gt; src/main/locale/messages_ru.po       &lt;span class="c1"&gt;# default&lt;/span&gt;
msgfmt --java2 -d src/main/resources -r &lt;span class="s1"&gt;&amp;#39;example.messages&amp;#39;&lt;/span&gt; -l es src/main/locale/messages_es.po &lt;span class="c1"&gt;# spanish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Здесь мы назвали ресурс &lt;code&gt;example.messages&lt;/code&gt;. Это название важно далее мы будем использовать его в коде для доступа к этим ресурсам.&lt;/p&gt;
&lt;h3&gt;Возвращаясь к пункту про маркировку&lt;/h3&gt;
&lt;p&gt;И самое важно, как должен выглядеть Java-код в котором мы размечаем строки. Как на рекомендует официальная документация по gettext for Java, мы можем сделать утилитный класс со статическими методами и использовать их чтоб получить перевод.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;example&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gnu.gettext.GettextResource&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Locale&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ResourceBundle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;I18NUtils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ResourceBundle&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;ResourceBundle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBundle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;example.messages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefault&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GettextResource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;ngettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;msgid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;msgid_plural&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GettextResource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ngettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msgid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msgid_plural&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь когда нам требуется перевод мы можем делать&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;example.I18NUtils._&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Что очень похоже на вызов gettext из C/C++ или Python.&lt;/p&gt;
&lt;p&gt;К сожалению, вызов ngettext не так похож и слегка многословен. Мы можем использовать ngettext в паре с MessageFormat для форматирования сообщений.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;example.I18NUtils.ngettext&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ngettext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;Something random happened {0} time&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;Something random happened {0} times&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Исходный код примеров можно скачать на &lt;a href="https://github.com/olomix/java-i18n-example/"&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Что есть из готовой автоматизации&lt;/h3&gt;
&lt;p&gt;Есть готовый проект &lt;a href="https://code.google.com/p/gettext-commons/"&gt;gettext-commons&lt;/a&gt;, который включает в себя интеграцию с Ant &amp;amp; Maven, что позволит упростить работу с gettext до вызова нескольких maven комманд. Можно ознакомиться с его &lt;a href="https://code.google.com/p/gettext-commons/wiki/Tutorial"&gt;туториалом&lt;/a&gt; для оценки чего он умеет. &lt;/p&gt;</content><category term="Java"></category><category term="GNU Gettext"></category></entry><entry><title>Защищаем JMS соединения с помощью SSL</title><link href="http://www.alek.ws/blog/2011/Nov/11/secure-jms-connections-with-ssl.html" rel="alternate"></link><published>2011-11-11T13:33:00+02:00</published><updated>2011-11-11T13:33:00+02:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-11-11:/blog/2011/Nov/11/secure-jms-connections-with-ssl.html</id><summary type="html">&lt;p&gt;Допустим, есть у нас задача раскинуть выполнение некой произвольной очереди заданий на несколько компьютеров. Основные условия этой задачи примерно такие:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Менеджер заданий и сам исполнитель (воркер) должны быть упакованы в одно приложение. Это дает возможность не напрягаться с установкой каких-то сложных систем. Запустили приложение — оно что-то вычисляет само для себя …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Допустим, есть у нас задача раскинуть выполнение некой произвольной очереди заданий на несколько компьютеров. Основные условия этой задачи примерно такие:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Менеджер заданий и сам исполнитель (воркер) должны быть упакованы в одно приложение. Это дает возможность не напрягаться с установкой каких-то сложных систем. Запустили приложение — оно что-то вычисляет само для себя. Хотим ускорить процесс — запускаем на соседнем компьютере его-же в качестве клиента к первому, и все делается в два раза быстрее.&lt;/li&gt;
&lt;li&gt;Задачи раздаются через JMS.&lt;/li&gt;
&lt;li&gt;К JMS брокеру нельзя присоединиться кому попало. Т.е. нужна идентификация.&lt;/li&gt;
&lt;li&gt;Не должно быть возможности прослушать трафик между менеджером и воркером.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Саму задачу я решал с помощью ActiveMQ и spring-jms. В классической схеме, мы должны создать сертификат для брокера. Создать сертификат для каждого клиента. Настроить SslContext брокера для использования в качестве KeyStore своего сертификата и в качестве TrustStore сертификатов клиентов. В окружениях клиентов прописать использование правильных сертификатов. В нашем случае есть несколько оговорок или упрощений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Брокер должен требовать от клиента сертификат для идентификации.&lt;/li&gt;
&lt;li&gt;Мы не должны менять глобальные настройки SSL клиента, как это рекомендуется в классической схеме. Его основной KeyStore может использоваться другими частями приложения. И KeyStore, используемый для соединения с брокером не должен конфликтовать с основным.&lt;/li&gt;
&lt;li&gt;Нам хватит одного сертификата для обоих сторон, т.к. и клиент и сервер — части одного и того-же приложения.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Первым делом генерируем новый KeyStore, который будет упакован в jar приложения.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keytool -genkey -alias broker -keyalg RSA -keystore broker.ks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Далее в конфигурации Spring контейнера настраиваем запуск брокера с обязательной идентификацией клиента по сертификату&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;amq:broker&lt;/span&gt; &lt;span class="na"&gt;brokerName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ActiveMQBroker&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;useJmx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;persistent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;amq:sslContext&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;amq:sslContext&lt;/span&gt; &lt;span class="na"&gt;keyStore=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;classpath:broker.ks&amp;quot;&lt;/span&gt;
                        &lt;span class="na"&gt;keyStorePassword=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt; 
                        &lt;span class="na"&gt;trustStore=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;classpath:broker.ks&amp;quot;&lt;/span&gt;
                        &lt;span class="na"&gt;trustStorePassword=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/amq:sslContext&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;amq:transportConnectors&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;amq:transportConnector&lt;/span&gt; &lt;span class="na"&gt;uri=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ssl://localhost:61616?needClientAuth=true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/amq:transportConnector&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/amq:transportConnectors&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/amq:broker&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И с этим же сертификатом настраиваем соединения к этому брокеру.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jmsFactory&amp;quot;&lt;/span&gt; 
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.apache.activemq.pool.PooledConnectionFactory&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;destroy-method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stop&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connectionFactory&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.apache.activemq.ActiveMQSslConnectionFactory&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brokerURL&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;ssl://localhost:61616&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keyStore&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;broker.ks&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keyStorePassword&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trustStore&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;broker.ks&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trustStorePassword&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В обоих случаях blocker.ks лежит прямо в jar файле, а пути к нему прописываются немного по разному. В зависимости от того, как каждый класс осуществляет доступ к ресурсам.&lt;/p&gt;
&lt;p&gt;Пример использования этих кусков конфигурации можно посмотреть в демонстрационном приложении &lt;a href="https://github.com/olomix/spring-jms"&gt;Sample Spring-Jms&lt;/a&gt;.&lt;/p&gt;</content><category term="ActiveMQ"></category><category term="Java"></category><category term="JMS"></category></entry><entry><title>Странное поведение psql в OS X Lion</title><link href="http://www.alek.ws/blog/2011/Nov/10/weird-psql-in-osx-lion.html" rel="alternate"></link><published>2011-11-10T10:08:00+02:00</published><updated>2011-11-10T10:08:00+02:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-11-10:/blog/2011/Nov/10/weird-psql-in-osx-lion.html</id><summary type="html">&lt;p&gt;Заметил, что при переходе на OS X 10.7 Lion испортилась работа разных горячих клавиш в консольной psql. Например не работал поиск по истории команд &lt;kbd&gt;CTRL-R&lt;/kbd&gt; и некоторые другие комбинации клавиш.&lt;/p&gt;
&lt;p&gt;Обновление операционной системы совпало с окончательным переходом с Macports на Homebrew. Поэтому первым делом я начал грешить на библиотеку …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Заметил, что при переходе на OS X 10.7 Lion испортилась работа разных горячих клавиш в консольной psql. Например не работал поиск по истории команд &lt;kbd&gt;CTRL-R&lt;/kbd&gt; и некоторые другие комбинации клавиш.&lt;/p&gt;
&lt;p&gt;Обновление операционной системы совпало с окончательным переходом с Macports на Homebrew. Поэтому первым делом я начал грешить на библиотеку readline из homebrew. Тем более в OS X есть свой аналог этой GNUшной библиотеки libedit. И brew устанавливает readline в режиме keg-only. Т.е. в отдельной директории, не проставляя никаких внешних ссылкой на нее.&lt;/p&gt;
&lt;p&gt;Некоторое время спустя, убедившись, что на первый взгляд все на местах и слинковано с правильными библиотеками, заметил, что сам бинарник psql лежит в /usr/bin/psql. Также в директории /usr/bin/ находится весь набор postgres утилит (pg_dump, pg_dumpall и т.д.). Ну само собой, первая мысль настоящего хардкорного юниксоида: "Какая с… насрала мне в… душу".&lt;/p&gt;
&lt;p&gt;Все оказалось намного интереснее. Теперь база данных PostgreSQL 9.0.4 является частью операционной системы OS X Lion. Не уверен нравится мне это или нет. Чувства по этому поводу двойственные.&lt;/p&gt;
&lt;p&gt;Хорошо это или плохо, но нужно исправлять ситуацию и приводить все к нормальному виду. Как всегда для этого есть несколько вариантов.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Запускаем psql с полным путем /usr/local/bin/psql&lt;/li&gt;
&lt;li&gt;Прописываем путь /usr/local/bin/ в начало переменной $PATH для себя&lt;/li&gt;
&lt;li&gt;Прописываем путь /usr/local/bin/ в начало переменной $PATH для всей системы&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Решив поиграть в камикадзе, пошел последним путем. Для этого в файле /etc/paths перенес путь /usr/local/bin на самый верх. Если вы не умеете загружаться в безопасных режимах и чинить всякие шалости вашей операционки, лучше этого не делать. Мало ли какая важная ерундовина зависит именно от системных версий программ, которые она найдет не в /usr/bin, а в /usr/local/bin и упадет. Безопаснее исправить PATH где-нибудь у себя в ~/.profile и не волноваться на счет системных сервисов.&lt;/p&gt;
&lt;p&gt;В итоге, все снова работает как должно: поиск по истории, автодополнение таблиц, полей и другие приятные мелочи, что позволяют смотреть на пользователей mysql с жалостью.&lt;/p&gt;</content><category term="OS X Lion"></category><category term="PostgreSQL"></category></entry><entry><title>Форматируем DecimalField в Django Forms</title><link href="http://www.alek.ws/blog/2011/Jun/23/decimalfield-in-django-forms.html" rel="alternate"></link><published>2011-06-23T14:41:00+03:00</published><updated>2011-06-23T14:41:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-06-23:/blog/2011/Jun/23/decimalfield-in-django-forms.html</id><summary type="html">&lt;p&gt;В статье рассмотрены две задачи&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Как выводить forms.DecimalField в нужном вам формате (например, обрезать незначащие нули)&lt;/li&gt;
&lt;li&gt;Как переопределять поля по умолчанию для ModelForm не переписывая каждое поле в отдельности&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рассмотрим задачу создания и редактирования модели, служащей для снятия антропометрии человеческого тела. Эта модель была использована при создании веб-приложения для …&lt;/p&gt;</summary><content type="html">&lt;p&gt;В статье рассмотрены две задачи&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Как выводить forms.DecimalField в нужном вам формате (например, обрезать незначащие нули)&lt;/li&gt;
&lt;li&gt;Как переопределять поля по умолчанию для ModelForm не переписывая каждое поле в отдельности&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рассмотрим задачу создания и редактирования модели, служащей для снятия антропометрии человеческого тела. Эта модель была использована при создании веб-приложения для спортивного клуба, где клиенты могут снимать с себя замеры и наблюдать за динамикой изменения своего тела. Возьмем упрощенный вариант, где нужно замерять объем груди, талии и вес. В реальности параметров гораздо больше, но для примера хватит.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max_digits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s1"&gt;&amp;#39;decimal_places&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;blank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Measurement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth.User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Chest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;waist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Waist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И, соответственно, форма&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Measurement&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Замеры должны сниматься в сантиметрах, но некоторые особо ответственные личности желают записывать еще и десятые доли сантиметра. Например, объем груди может составлять 105,5 см., а не 105 или 106. Нам нужно сделать хорошо всем — и тем кто умеет аппроксимировать до целых чисел, и людям (назовем их культурно), любящих точность.&lt;/p&gt;
&lt;p&gt;Можно было использовать PositiveIntegerField и сохранять параметры в миллиметрах. Или FloatField и как-то обходить машинную погрешность когда 0.1 + 0.1 + 0.1 - 0.3 = 5.5511151231257827e-017. Но умные люди придумали для нас модуль &lt;a href="http://docs.python.org/library/decimal.html"&gt;decimal&lt;/a&gt; в Python, а другие люди сделали поле &lt;a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#decimalfield"&gt;DecimalField&lt;/a&gt; в Django специально для этих целей.&lt;/p&gt;
&lt;p&gt;Использовав DecimalField мы сразу натыкаемся на проблему при попытке ввести запятую в качестве разделителя дробной части. По умолчанию, формы в Django не слушаются текущей локали и хотят получать числа с точкой, в качестве разделителя. Это решается добавлением localize=True в качестве параметра конструктору forms.DecimalField.&lt;/p&gt;
&lt;p&gt;Следующее, мы хотим получать от пользователя только положительные числа. В этом случае нам поможет параметр min_value=0. И еще мы хотим принимать после запятой только один знак. Снимать замеры в долях миллиметров это уже слишком. Для этого служат параметры max_digits=5 и decimal_places=1. Поскольку каждый замер является не обязательным, то добавим к имеющимся у нас параметрам blank=True и null=True.&lt;/p&gt;
&lt;p&gt;И последняя незадача. Если мы введем число 105 и сохраним его. То при попытке отредактировать, получим уже 105,0 а не 105. Это специфика работы DecimalField. Вроди мелочь, а неприятно.&lt;/p&gt;
&lt;p&gt;Чтоб победить последнюю проблему, нам нужно понять как работают Form и ModelForm. Класс Form берет свои данные, которые он позволяет нам редактировать, из двух источников. Первое, мы можем их задать в параметре initial при создании формы&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И второе, мы передаем данные в параметре data при сохранении (ну и files для соответствующих полей)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
                       &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Класс ModelForm пользуется именно параметром initial. ModelForm является наследником Form. Когда мы пытаемся отредактировать некую модель, то создаем ее форму следующим образом&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;measurement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Внутри это все выглядит как получение текущих значений полей модели measurement и передача их в качестве параметра initial конструктору суперкласа.&lt;/p&gt;
&lt;p&gt;Механизм работы ModelForm был рассмотрен для понимания где форма хранит свои данные, которые мы потом видим на странице. Либо в data — это данные, которые мы только что ввели, они не прошли валидацию и отображаются для нас в том виде, в котором мы их задали. Либо в initial — этот параметр заполняется конструктором ModelForm. Именно сюда и попадает наше число 105,0, которое нам нужно заменить на 105.&lt;/p&gt;
&lt;p&gt;Когда мы пытаемся получить доступ к данным нашей формы, для каждого значения вызывается метод Field.prepare_value. Т.е., если initial = {"weight": 105.0}, то при выводе данной формы в шаблоне на определенном этапе будет вызван метод DecimalField.prepare_value(105.0). По умолчанию метод возвращает полученный параметр, ничего с ним не делая. В этом месте мы и можем исправить ситуацию и подменить число на 105, вместо 105,0. Создадим новый класс, унаследовав его от DecimalField и переписав prepare_value&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decimal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Зачем здесь сделана проверка является ли value инстансом класса decimal.Decimal? Для случая когда мы сохраняем форму и значение берется из data (request.POST), а не из initial. А в request.POST хранятся unicode string, а не decimal.Decimal. И у этого класса нет метода normalize. Тогда мы просто передаем значение методу суперкласса, которые вернет его не меняя.&lt;/p&gt;
&lt;p&gt;Итак мы подошли к финалу и имеем следующее. Нам нужна форма, построенная по моделе Measurement и имеющая в качестве поля для models.DecimalField класс RoundedDecimalField, а не forms.DecimalField. Причем в качестве дополнительных параметров для этого поля должны передаваться localize=True и min_value=0. Если следовать официальной документации, то мы должны переопределить все такие поля в форме нужными нам классами. Т.е. сделать примерно следующее.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max_digits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s1"&gt;&amp;#39;decimal_places&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;blank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;min_value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;localize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Chest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;waist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Waist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Measurement&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если у нас несколько десятков полей, то вообще стает грустно переписывать по второму разу label и создавать новое поле для кадого элемента модели Measurement, когда это может делать за нас ModelForm.&lt;/p&gt;
&lt;p&gt;На самом деле, мы можем избежать всего этого. Внутри MedelForm вызывает определенный метод, который создает forms.Field для каждой models.Field. По умолчанию, каждый наследник класса models.Field имеет метод formfield, который создает для себя поле формы. Т.е. мы можем написать метод, который для полей DecimalField будет создавать нужные нам поля формы класса RoundedDecimalField, а для всех остальных просто вызывать метод formfield для создания полей по умолчанию. Этот метод называется formfield_callback и активно используется в приложении django.contrib.admin, где для многих полей моделей это приложение переопределяет виджеты по умолчанию на свои.&lt;/p&gt;
&lt;p&gt;Проще всего это будет видно на примере. Вот так будет выглядеть файл forms.py не зависимо от того, сколько полей DecimalField включает наша модель&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decimal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;localize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;form_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RoundedDecimalField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;msrmnt_formfield_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msrmnt_attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;formfield_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msrmnt_formfield_callback&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Measurement&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как видно, мы не дублировали ни одного параметра, которые уже заданы в моделе (max_digits, required и т.д.). И нам не нужно переопределять каждое поле модели чтоб получить заветный результат.&lt;/p&gt;
&lt;p&gt;Вывод. Django имеет прекрасную документацию, но если следовать только ей, и не изучать исходные тексты, то в некоторых случаях может быть реально грустно.&lt;/p&gt;</content><category term="Django"></category></entry><entry><title>Самая быстро прочитанная книга за последний год — «И ботаники делают бизнес»</title><link href="http://www.alek.ws/blog/2011/May/27/fastest-read-book-in-last-year.html" rel="alternate"></link><published>2011-05-27T19:00:00+03:00</published><updated>2011-05-27T19:00:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-05-27:/blog/2011/May/27/fastest-read-book-in-last-year.html</id><summary type="html">&lt;p&gt;Как-то последний год не очень удачно у меня прошел в плане достижений. Хватался за разные проекты, мечась в поисках «нужного» направления приложения усилий. В итоге чтение книг отходило на второй план и занимало порой месяцы (привет тебе, трехтомник &lt;a href="http://en.wikipedia.org/wiki/Atlas_Shrugged"&gt;Atlas Shrugged&lt;/a&gt;). Настроение для чтения появлялось только по ночам — десяток-другой страничек перед …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Как-то последний год не очень удачно у меня прошел в плане достижений. Хватался за разные проекты, мечась в поисках «нужного» направления приложения усилий. В итоге чтение книг отходило на второй план и занимало порой месяцы (привет тебе, трехтомник &lt;a href="http://en.wikipedia.org/wiki/Atlas_Shrugged"&gt;Atlas Shrugged&lt;/a&gt;). Настроение для чтения появлялось только по ночам — десяток-другой страничек перед сном, чтоб легче усыпалось.&lt;/p&gt;
&lt;p&gt;На этом фоне последняя книжка «&lt;a href="http://mann-ivanov-ferber.ru/books/realnistorii/botaniki/"&gt;И ботаники делают бизнес&lt;/a&gt;» меня поразила не столько содержанием, сколько скоростью с которой я ее прочел. Начал читать в среду утром, перед выездом в спортзал. Продолжил вечером после работы. А на следующий день она мне саботировала треть времени рабочего дня и заставила себя дочитать. Украсть у себя рабочее время чтобы дочитать книгу я давно себе не позволял.&lt;/p&gt;
&lt;p&gt;Впервые увидел упоминание о книге в блоге &lt;a href="http://mrmurtazin.com/2011/05/03/knigi-maksim-kotin-i-botaniki-delayut-biznes/"&gt;Эльдара Муртазина&lt;/a&gt;, запомнил ее на почитать и вернулся к своим делам. Надо сказать, Эльдар довольно восторженно отзывался о книге, что меня несколько удивило. Особенно учитывая описание книги — аналог success story очередного бизнесмена. Впоследствии встречая упоминания о книге на просторах интернета, я вспоминал первые впечатления от рецензии Эльдара и думал «да, надо бы прочесть следующей книгой эту».&lt;/p&gt;
&lt;p&gt;Вот это свершилось и я ее прочел. Раз я пишу эту заметку, то думаете я буду расхваливать сейчас книгу во всех подробностях? Да нет, не буду. Нельзя сказать, что эта книга подняла мою мотивацию на невообразимый уровень (тот же Ричард Бренсон мотивирует сильнее). Нельзя также сказать, что я начал мечтать создать что-то эдакое, что пришло на ум во время чтения (как было с iКона).&lt;/p&gt;
&lt;p&gt;Но факт остается фактом. Хоть в книге и нет каких-то лихих откровений и открывающих гараза высказываний, но читается она на одном дыхании. И после этого одного дыхания хочется про книгу рассказывать и советовать ее друзьям, чтоб можно было обсудить с ними.&lt;/p&gt;
&lt;p&gt;Не буду вдаваться в анализ парадоксов, почему может понравится книга, в которой нет ничего особенного. Скажу только что книга написана про реального человека. Он строил свой бизнес в российской глубинке. Он вел свой блог, в котором описывал многие шаги своего бизнеса. Он балансировал на грани прибыли и банкротства большую часть повествования. Но с другой стороны, книгу сложно назвать документальной. Читается она как художественное произведение. Но после окончания этого произведения, вы можете зайти на &lt;a href="http://sila-uma.ru/"&gt;блог&lt;/a&gt; героя книги, и почитать что же с ним случилось после того, как книга была издана.&lt;/p&gt;</content></entry><entry><title>Читать свежую документацию вредно</title><link href="http://www.alek.ws/blog/2011/May/05/devel-docs-are-bad.html" rel="alternate"></link><published>2011-05-05T16:46:00+03:00</published><updated>2011-05-05T16:46:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-05-05:/blog/2011/May/05/devel-docs-are-bad.html</id><summary type="html">&lt;p&gt;Еще когда до выхода Django 1.3 оставалось месяцев пять, я начал пытаться использовать ее для разработки коммерческих проектов. В принципе понятно, что это плохо. Но когда не хочется, либо нет времени просто заниматься ерундой, а новые "фичи" попробовать ох как хочется, приходится чем-то жертвовать. Вот и я жертвовал отчасти …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Еще когда до выхода Django 1.3 оставалось месяцев пять, я начал пытаться использовать ее для разработки коммерческих проектов. В принципе понятно, что это плохо. Но когда не хочется, либо нет времени просто заниматься ерундой, а новые "фичи" попробовать ох как хочется, приходится чем-то жертвовать. Вот и я жертвовал отчасти своим временем, отчасти временем клиентов, которое растрачивалось на переписывания готовых кусков проектов по мере изменений, вносимых в альфу. &lt;/p&gt;
&lt;p&gt;Помню как приходили к текущим названиям переменных STATIC_URL и STATIC_ROOT. Также помню как приходилось чинить django-grappelli для работы с новой админкой.&lt;/p&gt;
&lt;p&gt;И вот долгожданное событие наступило. 23 марта 2011 года случился релиз 1.3. Можно вздохнуть полной грудью. Больше не нужно будет переписывать куски сайтов, делая svn up в директории Django. Очередной раз я даю себе обещание не пользовать trunk для работы, а сидеть на стабильном релизе до выхода очередного стабильного релиза.&lt;/p&gt;
&lt;p&gt;Еще параллельно заставляю себя пользоваться &lt;a href="http://docs.djangoproject.com/en/1.3/ref/class-based-views/"&gt;Class Based Views&lt;/a&gt;, появившихся в новой Django 1.3. Это вообще спорный момент. С одной стороны удобно и красиво, но претензий у меня к ним крайне много. Будет настроение высказаться — напишу.&lt;/p&gt;
&lt;p&gt;Итак возвращаемся к теме статьи. Нужно мне было описать в urls.py один адрес, по которому будет осуществляться переход на другой адрес. Как эта простейшая задача может служить поводом к написанию всего этого текста? Давайте разберемся.&lt;/p&gt;
&lt;p&gt;Имеем такой urls.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;anthropometry.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthropometry_measurement_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Нужно добавить еще один адрес ^user/$ который будет перебрасывать на этот корневой view под именем anthropometry_measurement_create. &lt;/p&gt;
&lt;p&gt;Какой в Django 1.3 правильный путь редиректа с одного адреса на другой? Правильно! Новенький модный такой &lt;a href="http://docs.djangoproject.com/en/1.3/ref/class-based-views/#redirectview"&gt;RedirectView&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Т.е. наш urls.py должен выглядеть теперь таким образом&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RedirectView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;anthropometry.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthropometry_measurement_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^user/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RedirectView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/anthropometry/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ой, что это за ужас? Хардкодить адреса в коде это не наш путь. Так делать нельзя, и делать мы этого не будем. У адреса, на который нам следует осуществить переход есть имя anthropometry_measurement_create, вот по этому имени мы и должны к нему обращаться. Но как это сделать из urls.py? Этот файл ведь грузится Django'й во время создания модуля URLconf, и мы не можем использовать внутри его reverse('anthropometry_measurement_create'), т.к. URLconf еще не создан и мы не имеем доступа к нему во время его создания.&lt;/p&gt;
&lt;p&gt;Правильный путь — добавить вызов функции reverse в модуле views.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MeasurementFormRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedirectView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_redirect_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthropometry_measurement_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И наш urls.py в конечном итоге придет в такому виду&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;anthropometry.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasurementFormRedirect&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthropometry_measurement_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^user/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasurementFormRedirect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь все кошерно, все работает как надо, никаких хардкодов, все по последнему слову моды и технологий. &lt;/p&gt;
&lt;p&gt;Но не кажется ли вам здесь кое-что странное?&lt;/p&gt;
&lt;p&gt;Ну да, конечно. Вот оно. Этот мир еще в своем уме? Для того, чтобы прописать простейшее правило редиректа с одного практически статического адреса на другой, мне понадобилось создать класс, переписать в нем один из методов и в другом файле воспользоваться этим классом. По-моему это круто, как для такой элементарной задачи. Уж лучше в конфиг nginx строку добавлю... А тем более для такого лаконичного языка как Python. Если бы я хотел генерировать сложные массивы не одной строкой, а несколькими страницами кода, я бы на Java продолжал решать свои задачи.&lt;/p&gt;
&lt;p&gt;Вобщем обуревают меня подобные мысли, грущу я, а тем временем продолжаю писать подобный код. Так уж получилось, что забыл я в каком модуле функция reverse находится и пошел в гугл посмотреть. Итак смотрю я на нее и вижу... функцию &lt;a href="http://docs.djangoproject.com/en/dev/topics/http/urls/#reverse-lazy"&gt;reverse_lazy()&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;В рот мне ноги, простите за мой французский! Как вообще так случилось, что я только сейчас встретил эту фукнцию. Оказывается мир не такой плохой, как я про него думал. Эта функция позволяет обращаться к именованным адресам прямо из urls.py, т.к. непосредственное вычисления адреса будет происходить не сразу, а когда оно реально понадобится. Теперь никаких новых классов во views.py, и все записывается одной строчкой в urls.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasurementForm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthropometry_measurement_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^user/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RedirectView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthropometry_measurement_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вот мир и спасен. &lt;/p&gt;
&lt;p&gt;Кажется... &lt;/p&gt;
&lt;p&gt;Что, попробовали и у вас не заработало? Правильно! Этот паскудник Google, чтоб у него электричество в датацентрах в рандомном порядке пропадало, показал мне документацию не на стабильную версию Django 1.3, а на trunk. И эта функция доступна только настоящим джедаям. А обычные смертные продолжаю плодить классы во views.py. Сижу я теперь, и прогоняю от себя мысли вновь начать использовать trunk.&lt;/p&gt;
&lt;p&gt;Так вот, мораль этого поста не в плохой джанге. На самом деле я этот редирект мог сделать миллионом разных способов и выразить в десяти буквах, написав их в каком-нить экзотическом месте. Мораль в том, что столкнувшись с идеальным, вам сразу хочется испортить хорошее и все переделать. Не читайте доки незарелизенных версий продуктов, нечего расстраиваться. Как говорится, лучшее — враг хорошего.&lt;/p&gt;</content></entry><entry><title>Про radio buttons и ModelForm в Django</title><link href="http://www.alek.ws/blog/2011/Apr/14/radio-buttons-in-django-modelform.html" rel="alternate"></link><published>2011-04-14T11:32:00+03:00</published><updated>2011-04-14T11:32:00+03:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-04-14:/blog/2011/Apr/14/radio-buttons-in-django-modelform.html</id><summary type="html">&lt;p&gt;Допустим есть задача в форме давать возможность человеку указать свой пол. Конкретно для пола нам хватит поля django.forms.BooleanField или django.forms.NullBooleanField, если указывать пол не обязательно. Но поскольку данный пример взят в образовательных целях, а в реальной жизнии скорее всего будет больше, чем 2 варианта выбора, будем …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Допустим есть задача в форме давать возможность человеку указать свой пол. Конкретно для пола нам хватит поля django.forms.BooleanField или django.forms.NullBooleanField, если указывать пол не обязательно. Но поскольку данный пример взят в образовательных целях, а в реальной жизнии скорее всего будет больше, чем 2 варианта выбора, будем использовать django.forms.IntegerField.&lt;/p&gt;
&lt;p&gt;Например у нас есть такая модель&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GENDER_MALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;GENDER_FEMALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;GENDER_MALE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; 
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GENDER_FEMALE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Men&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И такая форма&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MenForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Men&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RadioSelect&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если мы попробуем вывести в шаблоне эту форму, то обнаружим не два radio-button'а, а три. Первым будет пустой выбор. Давайте попробуем разобраться почему.&lt;/p&gt;
&lt;p&gt;При создании полей для формы, вызывается метод django.forms.models.fields_for_model. В этот метод передаются параметры, которые вы могли бы описать в классе Meta класса ModelForm: model, fields, exclude, widgets, formfield_callback&lt;/p&gt;
&lt;p&gt;В случае, если formfield_callback не Null, будет вызван этот метод для получения инстанса django.forms.IntegerField. В общем же случае, для каждого поля нашей модели вызывается метод formfield. Т.е. для получения объекта класса django.forms.IntegerField мы вызовем model.fields["gender"].formfield(), который вернет там IntegerField с нужным нам виджетом (RadioSelect).&lt;/p&gt;
&lt;p&gt;Посмотрим что происходит в методе formfield и где берется дополнительный элемент в списке choices. В этом методе есть такие строки&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;include_blank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;initial&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;choices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;include_blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;include_blank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как понятно из названия переменной, если &lt;code&gt;include_blank==True&lt;/code&gt;, то в choices добавляется "путое значение". Попробуем разобраться для чего это сделано внимательно вчитавшись в первую строчку. Итак, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;если поле может быть пустым (&lt;code&gt;self.blank == True&lt;/code&gt;), то добавить пустой поле&lt;/li&gt;
&lt;li&gt;если нет значения по умолчанию у этого поля модели, либо если при создании формы не было передано initial значение для этого поля, то также добавляется пустое поле&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;С причиной мы разобрались. Подумаем теперь как добиться того, что нам нужно.&lt;/p&gt;
&lt;h3&gt;Вариант номер один&lt;/h3&gt;
&lt;p&gt;Наиболее простой вариант — это добавить значение по умолчанию в модель.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GENDER_MALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;GENDER_FEMALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;GENDER_MALE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; 
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GENDER_FEMALE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Men&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GENDER_MALE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Недостаток данного метода, что у пользователя всегда будет выбрано одно из значений, и мы не заставим его внимательно прочитать что от него хотят и в большинстве случаев будем получать значение по умолчанию.&lt;/p&gt;
&lt;h3&gt;Метод номер два&lt;/h3&gt;
&lt;p&gt;Можно переопределить значение поля gender, которое создается метаклассом ModelForm. В этом случае forms.py у вас будет выглядеть примерно так.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MenForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RadioSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Men&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Явных недостатков не вижу, кроме как необходимо отдельно определять label для поля и др. значения, которые уже не возьмутся автоматически с определения модели.&lt;/p&gt;
&lt;h3&gt;Метод номер три&lt;/h3&gt;
&lt;p&gt;Ну и на закуску самый "хакерский" метод. Как вы помните, функция fields_for_model в качетсве параметра принимает formfield_callback — это метод, который будет вызываться для создания всех полей формы. Вызываться этот метод будет вместо formfield. Не буду дого рассказывать откуда что берется и как происходит внутри, сразу приведу пример. Подробности можно прочитать в файле django/forms/models.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formfield_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;choices&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MenForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;formfield_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formfield_cb&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Men&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RadioSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CHOICES_GENDER&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ну и традиционно про недостатки. Уж очень как-то много букв нужно писать чтоб все заработало. Ну и строчку &lt;code&gt;formfield_callback = formfield_cb&lt;/code&gt; нужно включать во всех наследников базовой формы. Если мы унаследуем форму и забудем добавить эту строчку, то новая форма снова будет иметь пустое значение в radio-select виджете.&lt;/p&gt;</content><category term="Django"></category></entry><entry><title>Скоро, очень скоро</title><link href="http://www.alek.ws/blog/2011/Mar/18/soon-enough.html" rel="alternate"></link><published>2011-03-18T13:30:00+02:00</published><updated>2011-03-18T13:30:00+02:00</updated><author><name>Oleg Lomaka</name></author><id>tag:www.alek.ws,2011-03-18:/blog/2011/Mar/18/soon-enough.html</id><summary type="html">&lt;p&gt;Вот со дня на день соберусь и что-нибудь напишу.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Вот со дня на день соберусь и что-нибудь напишу.&lt;/p&gt;</content></entry></feed>